#!/usr/bin/env bash

# Use rofi in qutebrowser to delete/open (most recent) downloaded files
# Dependencies: rofi, xdg-open and xdg-mime

message () { echo "message-info ${1@Q}" >> "$QUTE_FIFO"; }

rofi_default_args=(
        -monitor -2 # place above window
        -location 6 # aligned at the bottom
        -width 500  # use full window width
        -i
        -no-custom
        -format i   # make rofi return the index
        -l 10
        -p 'Open download' -dmenu
    )
download_dir=${QUTE_DOWNLOAD_DIR:-$HOME/Downloads}
rofi_cmd="rofi"
declare -a files

# Handle options
# recent: If it exists, act of most recent file, otherwise let the user choose
# delete: If it exists, delete the file, otherwise open it
long_opts=delete,recent
opts=dr
parsed=$(getopt --options=$opts --longoptions=$long_opts --name "$0" -- "$@")

[[ $? -ne 0 ]] && exit 1 # exit when the option is unknown

# Update positional arguments with getopt results,
# i.e. placing operands after "--" to deal with them later
eval set -- "$parsed"

is_delete= is_recent=
while : ; do
    case "$1" in
        -d|--delete) is_delete=1; shift ;;
        -r|--recent) is_recent=1; shift ;;
        --) shift; break ;;
        *) echo "Programming error"; exit 3 ;;
    esac
done

# Test existance of directory and command
[[ ! -d "$download_dir" ]] \
    && message "Download directory $download_dir is not found!" && exit 0
! command -v "$rofi_cmd" > /dev/null \
    && message "$rofi_cmd command is not found in PATH" && exit 0

# Store files sorted by modification time in an array
while IFS=$'\0' read -r -d ''; do
  files+=("$(basename "$REPLY")")
done < <(find "$download_dir" -type f -printf '%Ts %p\0' | cut -z -d " " -f 2- )

[[ "${#files[@]}" -eq 0 ]] \
    && message "Download directory $download_dir is empty" && exit 0

# Open the most recent file or the chosen one
if [[ $is_recent ]]; then
    chosen_line=0
else
    chosen_line="$(printf "%s\n" "${files[@]}" | $rofi_cmd "${rofi_default_args[@]}")" || echo $'\0'
fi

# No file was chosen; i.e. NULL value
[[ ! "$chosen_line" ]] && exit 0

file="${files[$chosen_line]}"
path="${download_dir}/${file}"

# Delete the file and exit
[[ $is_delete ]] && {
    rm "$path";
    message "${file@Q} is Deleted" && exit 0
}
# Otherwise open it

filetype=$(xdg-mime query filetype "$path")
application=$(xdg-mime query default "$filetype")

[[ -z "$application" ]] \
    && message "Can't open $file of type $filetype" && exit 0

message "Opening $file"

xdg-open "$path" &

exit 0
