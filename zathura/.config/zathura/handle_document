#!/usr/bin/env python3

""" Remove/Yank annotated text """

import subprocess
import sys
from typing import List, Tuple

import fitz
import pyperclip as pc


def parse_highlight(annot: fitz.Annot, wordlist: List[Tuple[float, float, float, float, str, int, int, int]]) -> str:
    points = annot.vertices
    quad_count = int(len(points) / 4)
    sentences = []
    for i in range(quad_count):
        # where the highlighted part is
        r = fitz.Quad(points[i * 4 : i * 4 + 4]).rect

        words = [w for w in wordlist if fitz.Rect(w[:4]).intersects(r)]
        sentences.append(" ".join(w[4] for w in words))
    sentence = " ".join(sentences)
    return sentence


def handle_page(page):
    wordlist = page.get_text("words")  # list of words on page
    wordlist.sort(key=lambda w: (w[3], w[0]))  # ascending y, then x

    highlights = []
    annot = page.first_annot
    while annot:
        if annot.type[0] == 8:
            highlights.append(parse_highlight(annot, wordlist))
            if 'content' in annot.info:
                highlights.append(f" {annot.info['content']} ")
        annot = annot.next
    return highlights

def yank_highlights(file_path: str) -> List:
    doc = fitz.open(file_path)

    highlights = []
    for page in doc:
        highlights += handle_page(page)

    pc.copy("\n".join(highlights))

def yank_section_name_of_page(file_path: str, page_num: int):
    """Get the section name of the highlighted text

    Args:
        page_num: page number
        text: selected text
        file_path: file path
    """
    doc = fitz.open(file_path)
    text = pc.paste()

    toc = doc.get_toc()
    section_name = ""
    for index, section in enumerate(toc):
        curr_section = section
        curr_index = index
        # Get the section that's after this page
        if page_num  < curr_section[2]:
            page_text = doc.get_page_text(page_num-1, flags=0)
            # Get the current section (could be in current page or before)
            curr_section = toc[curr_index-1]
            section_name = curr_section[1]

            # If the section in current page, check if text is after the section
            while page_num == curr_section[2]:
                # Pages index start from 0 in this method
                section_name = curr_section[1]
                # If text is below the section, use it
                if page_text.rfind(text) > page_text.rfind(section_name):
                    break
                else:
                    curr_index = curr_index-1
                    curr_section = toc[curr_index-1]
                    section_name = curr_section[1]
            break
    subprocess.run(["/home/yasser/.config/zathura/yank_zathura_link_handler",
                    file_path, str(page_num), section_name])

def yank_chapters_as_tasks(file_path: str):
    """Yank chapters as Org tasks in the following format
    ** TODO Read <chapter name> chapter (<chapter index>)

    Args:
        file_path: path fo file
    """
    doc = fitz.open(file_path)
    toc = doc.get_toc()

    chapters = filter(lambda x: x[0] == 1, toc)
    tasks = [f"** TODO Read {chapter[1]} chapter ({index})" for index, chapter
             in enumerate(chapters)]
    pc.copy("\n".join(tasks))
    

def remove_annotations(file_path: str):
    doc = fitz.open(file_path)
    for page in doc:
        annot = page.first_annot
        while annot:
            annot = page.delete_annot(annot)
    doc.save(file_path, encryption=fitz.PDF_ENCRYPT_KEEP, incremental=True)

if __name__ == "__main__":
    file_path = sys.argv[2]
    if sys.argv[1] == "get_annotations":
        yank_highlights(file_path)
        list_files = subprocess.run(["dunstify", "Copied to clipboard"])
    elif sys.argv[1] == "remove_annotations":
        print("removing")
        remove_annotations(file_path)
    elif sys.argv[1] == "yank_chapters_as_tasks":
        print("Yanking chapters as tasks")
        yank_chapters_as_tasks(file_path)
    elif sys.argv[1] == "yank_section":
        print("Getting section")
        yank_section_name_of_page(file_path, int(sys.argv[3]))
    else:
        raise ValueError
