#!/usr/bin/env python3

""" Remove/Yank annotated text """

import sys
import fitz 
from typing import List, Tuple
import subprocess
import pyperclip as pc

def parse_highlight(annot: fitz.Annot, wordlist: List[Tuple[float, float, float, float, str, int, int, int]]) -> str:
    points = annot.vertices
    quad_count = int(len(points) / 4)
    sentences = []
    for i in range(quad_count):
        # where the highlighted part is
        r = fitz.Quad(points[i * 4 : i * 4 + 4]).rect

        words = [w for w in wordlist if fitz.Rect(w[:4]).intersects(r)]
        sentences.append(" ".join(w[4] for w in words))
    sentence = " ".join(sentences)
    return sentence


def handle_page(page):
    wordlist = page.get_text("words")  # list of words on page
    wordlist.sort(key=lambda w: (w[3], w[0]))  # ascending y, then x

    highlights = []
    annot = page.first_annot
    while annot:
        if annot.type[0] == 8:
            highlights.append(parse_highlight(annot, wordlist))
        annot = annot.next
    return highlights

def yank_highlights(file_path: str) -> List:
    doc = fitz.open(file_path)

    highlights = []
    for page in doc:
        highlights += handle_page(page)

    return highlights

def remove_annotations(file_path: str):
    doc = fitz.open(file_path)
    for page in doc:
        annot = page.first_annot
        while annot:
            annot = page.delete_annot(annot)
    doc.save(file_path, encryption=fitz.PDF_ENCRYPT_KEEP, incremental=True)

if __name__ == "__main__":
    if len(sys.argv) < 3:
        raise ValueError
    file_path = sys.argv[2]
    if sys.argv[1] == "get_annotations":
        pc.copy("\n".join(yank_highlights(file_path)))
        list_files = subprocess.run(["dunstify", "Copied to clipboard"])
    elif sys.argv[1] == "remove_annotations":
        print("removing")
        remove_annotations(file_path)
    else:
        raise ValueError
