#!/usr/bin/env bash

# Dependencies: Emacs for org mode & wmctrl to focus window
# Use org mode's clocking in emacs with rofi to navigate and use clock
# operations

TMP_FILE_PATH="/tmp/org_current_task"
SHOW_TASK_NAME=0

function go_to_item () {
    [[ ! -e $TMP_FILE_PATH ]] && dunstify "No item is clocked in" && return

    CURSOR=$(sed "4q;d" $TMP_FILE_PATH | grep -o '[0-9]*')

    FULL_PATH=$(tail -1 $TMP_FILE_PATH)

    # Focus window
    wmctrl -xa emacs-org-mode

    emacsclient "+$CURSOR" "$FULL_PATH"
}

function clock_in () {
    emacsclient -e "(org-clock-in-last)"
}

function clock_out () {
    emacsclient -e "(org-clock-out)"
}

function clock_toggle () {
    emacsclient -e "(my/org-toggle-last-clock nil)"
}

function clock_cancel () {
    emacsclient -e "(org-clock-cancel)"
}


function get_time_spent () {
    local -i NAME_MAX_SIZE=52

    [[ ! -e $TMP_FILE_PATH ]] && echo "" && return

    TASK_INFO="$(head -3 $TMP_FILE_PATH | tail -1)"
    TASK_NAME="$(cut -d ' ' -f 3- <(echo "$TASK_INFO"))"
    TASK_TIME="$(cut -d ' ' -f -2 <(echo "$TASK_INFO"))"

    # Limit the size of information to not overwhelm polybar when the string is
    # too big
    [[ ${#TASK_NAME} -gt $NAME_MAX_SIZE ]] && \
        TASK_NAME=${TASK_NAME:0:NAME_MAX_SIZE}"...)"

    # Seconds since the temp file got created
    local -i SECONDS_SINCE_CREATION=$(($(date +%s) - $(date +%s -r $TMP_FILE_PATH)))

    # Use HH:MM format
    TIME_SINCE_CREATION=$(date --date="@$SECONDS_SINCE_CREATION" -u +%H:%M)

    INFO_TO_SHOW="$TIME_SINCE_CREATION -$TASK_TIME"

    [[ $SHOW_TASK_NAME -eq 1 ]] && INFO_TO_SHOW="${INFO_TO_SHOW} $TASK_NAME"

    echo "$INFO_TO_SHOW"
}

case "$1" in
    "clock_in") clock_in ;;
    "clock_out") clock_out ;;
    "clock_toggle") clock_toggle ;;
    "clock_cancel") clock_cancel ;;
    "go_to_item") go_to_item ;;
    "get_time_spent") get_time_spent ;;
    *) echo "$1 is a wrong argument" ;;
esac
