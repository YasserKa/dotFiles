#!/usr/bin/env bash
# Preview media for fzf
# Solution inspired by ranger's scope.sh
#
# Possible improvements:
# - Could be extended to include file's metadata using exiftool, ebook-meta, mediainfo
# - Support video preview
#   https://github.com/jarun/nnn/blob/f2a8648861ff88e1c2d5a95ae4d76b7367e12c9b/plugins/preview-tui#L468
#

#######################################
# Check if a string exists in array strictly or as a substring
# Arguments:
#   $1 "strict" or "substring"
#   $2 string to check
#   $3 array of values to check against
# Returns:
#   0 if string exists in array
#   1 if string doesn't exists in array
#######################################
array::contains() {

	local -r mode="$1"
	local -r target="$2"
	shift 2
	local -r values=("$@") # the array of values to check against

	[[ $# -lt 2 ]] && printf "%s: Missing arguments\n" "${FUNCNAME[0]}" && return 2

	for val in "${values[@]}"; do
		if [[ "$mode" == "strict" && "$target" == "$val" ]]; then
			return 0
		elif [[ "$mode" == "substring" && "$target" == *"$val"* ]]; then
			return 0
		fi
	done

	return 1
}

main() {
	# Clear kitty image
	printf "\x1b_Ga=d,d=A\x1b\\"
	[[ ! -e "$1" ]] && echo "$1" && exit 0

	MIME_TYPE="$(file -bL --mime-type -- "$1")"

	if [[ "$1" == *.* ]]; then
		EXTENSION="${1##*.}"
	else
		EXTENSION=""
	fi

	local -r IMAGE_CACHE_DIR="/tmp"
	local -r IMAGE_CACHE_PATH="/${IMAGE_CACHE_DIR}/img_preview_media"
	local -r DEFAULT_SIZE="1920x1080"

	# Generate an image for PDF/djvu/epub...
	if [[ "$MIME_TYPE" == "application/pdf" ]]; then
		pdftoppm -f 1 -l 1 \
			-scale-to-x "${DEFAULT_SIZE%x*}" \
			-scale-to-y -1 \
			-singlefile \
			-jpeg -tiffcompression jpeg \
			-- "${1}" "$IMAGE_CACHE_PATH" 2>/dev/null
		wait
		set -- "${IMAGE_CACHE_PATH}.jpg"
		MIME_TYPE="image/jpeg"
	fi

	# Word processing
	DOCUMENT_MIME_TYPES=("officedocument" "opendocument")
	if array::contains "substring" "$MIME_TYPE" "${DOCUMENT_MIME_TYPES[@]}"; then
		libreoffice --convert-to jpg "${1}" --outdir "$IMAGE_CACHE_DIR" >/dev/null
		wait
		file_name="${1%.*}"
		mv -f "${IMAGE_CACHE_DIR}/$file_name.jpg" "$IMAGE_CACHE_PATH.jpg"
		MIME_TYPE="image/jpeg"
		set -- "${IMAGE_CACHE_PATH}.jpg"
	fi

	if [[ "$MIME_TYPE" == "image/vnd.djvu" ]]; then
		ddjvu -format=tiff -quality=90 -page=1 -size="${DEFAULT_SIZE}" \
			- "${IMAGE_CACHE_PATH}" <"$1"
		wait
		set -- "${IMAGE_CACHE_PATH}"
		MIME_TYPE="image/tiff"
	fi

	if [[ "$MIME_TYPE" == video/* ]]; then
		ffmpegthumbnailer -m -s0 -i "$1" -o "${IMAGE_CACHE_PATH}.jpg" &>/dev/null
		wait
		set -- "${IMAGE_CACHE_PATH}.jpg"
		MIME_TYPE="image/jpeg"
	fi

	DOCUMENT_MIME_TYPES=("application/epub+zip" "application/x-mobipocket-ebook" "application/x-fictionbook+xml")
	if array::contains "stric" "$MIME_TYPE" "${DOCUMENT_MIME_TYPES[@]}"; then
		ebook-meta --get-cover="${IMAGE_CACHE_PATH}" -- "$1" >/dev/null
		wait
		set -- "${IMAGE_CACHE_PATH}"
		MIME_TYPE="image/jpeg"
	fi

	# Directory
	if [[ -d "$1" ]]; then
		# Used instead of lsd, because it properly colors symbolic links
		# https://github.com/lsd-rs/lsd/issues/1010
		eza -1 --color=always "$1"
		return
	fi

	COMPRESSED_EXT=("a" "ace" "alz" "arc" "arj" "bz" "bz2" "cab" "cpio" "deb" "gz" "jar" "lha" "lz" "lzh" "lzma" "lzo" "rpm" "rz" "t7z" "tar" "tbz" "tbz2" "tgz" "tlz" "txz" "tZ" "tzo" "war" "xpi" "xz" "Z" "zip")
	if array::contains "strict" "$EXTENSION" "${COMPRESSED_EXT[@]}"; then
		atool -l "$1" | awk '/^[[:space:]]*[0-9]+/ {
    	if ($1 != "0" && $1 != "0B") {  # Skip zero-length files
      	size = $1
      	cmd = "echo " size " | numfmt --to=iec-i --suffix=B"
      	cmd | getline hr_size
      	close(cmd)
      	# Align last line correctly
      	if ($4 == "") {
        	$4=$2 " " $3
        	$3=""
        	$2=""
      	}
      $2=" " $2
      printf "\033[32m%9s\033[0m %-11s %-7s \033[36m%s\033[0m\n", hr_size, $2, $3, $4
      {next}
    }
} !/Archive:*/i NF > 1'
		return
	fi

	# If it's a preview in navi, reduced preview to make it fit
	pgrep navi >/dev/null && FZF_PREVIEW_LINES=$((FZF_PREVIEW_LINES - 6))

	case "$MIME_TYPE" in
	image/*) kitty +kitten icat --clear --silent --scale-up --transfer-mode=stream --stdin=no --place="${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@0x0" "$1" & ;;
	text/*) bat -n --color=always "$1" ;;
	audio/*) exiftool "$1" ;;
	application/json) bat --color=always --language=json <(jq '.[] | .' "$1") ;;
	*) bat -n --color=always "$1" ;;
	esac
}

main "$@"
