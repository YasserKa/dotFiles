#!/usr/bin/env bash
# Import to zotero from various sources to a collection
#
# Arguments:
#   $1: URL or path to document
#   $2: Colletion name (optional)
#
# Dependencies: zotero netcat
#

get_collection_id_from_name() {
	local -r COLLECTION_NAME="$1"

	script='
  (async function () {
let collections = Zotero.Collections.getLoaded()
let collectionId = 0
for (let collection of collections) {
  if (collection.name == "'"$COLLECTION_NAME"'") {
    collectionId = collection.id;
    break;
  }
}

result=collectionId.toString()
'
	eval_script_return_value "$script"
}

pick_collection_id() {
	script='
  (async function () {
  let libraries = await Zotero.Libraries.getAll()

  let collections_str = ""

  function get_collections(collections, name) {

  for (let collection of collections) {
    if (collection.hasChildCollections()) {
      collections_str += collection.key + "\t" + name + " >> " + collection.name + "\n"
      get_collections(collection.getChildCollections(), name + " >> " + collection.name)
    } else {
    collections_str += collection.key + "\t" + name + " >> " + collection.name +"\n"
  }
}
return collections_str
}

let collections = await Zotero.Collections.getLoaded()

for (let library of libraries) {
  let collections = await Zotero.Collections.getByLibrary(library.id)
  collections_str += get_collections(collections, library.name)
}

result = collections_str
'

	result="$(eval_script_return_value "$script")"

	result="$(command cat <(fre --store_name "$FRE_NAME" --sorted | grep -Fx -f <(echo "$result")) <(echo "$result" | grep -Fvx -f <(fre --store_name "$FRE_NAME" --sorted)))"
	result="${result//>>/\\033[36m>>\\033[0m}"

	TMP_FILE="$(mktemp -t "tmp_XXX")"
	readonly TMP_FILE

	trap 'rm $TMP_FILE' RETURN
	IFS='' read -r -d '' cmd <<EOF
  printf "$result" |  fzf --ansi --with-nth '{2..}' --preview-window hidden >| '${TMP_FILE}'
EOF

	eval_interactive_cmd --floating "$cmd"

	[[ -s "$TMP_FILE" ]] || exit 0

	fre --store_name "$FRE_NAME" --add "$(cat "$TMP_FILE")"
	collection_key="$(<"$TMP_FILE" cut -d $'\t' -f 1)"

	script='
(async function () {
let libraryId = await Zotero.Libraries.getAll()[0].id

let collectionId = await Zotero.Collections.getByLibraryAndKey(libraryId, "'"$collection_key"'").id

result=collectionId.toString()
'
	eval_script_return_value "$script"
}

import_source() {
	if [[ -f "$SOURCE" ]]; then
		# Attach document
		import_script='
  (async function () {
  function getZoteroPane() {
		var windows = Zotero.getMainWindows();
		for (let win of windows) {
			if (win.ZoteroPane) return win.ZoteroPane
		  }
	  }
    await getZoteroPane().collectionsView.selectCollection('"$COLLECTION_ID"')
    await getZoteroPane().addAttachmentFromDialog(false, 0,["'"$SOURCE"'"]);
  })();'
	elif curl --head "$SOURCE"; then

		HTML_PATH="$(mktemp -t "tmp_XXX")"
		readonly HTML_PATH

		trap 'rm $HTML_PATH' RETURN
		# Add URL
		curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0" "$SOURCE" --output "$HTML_PATH"
		# shellcheck disable=2016
		import_script='
  (async function () {
  var { library, collection, editable } = Zotero.Server.Connector.getSaveTarget();
  var libraryID = library.libraryID;
  let uri = "'"$SOURCE"'"

var cookieSandbox = uri
? new Zotero.CookieSandbox(null, uri, "", null)
: null;

var parser = new DOMParser();
var data = await Zotero.File.getContentsAsync("'"$HTML_PATH"'");
var doc = parser.parseFromString(`<html>${data}</html>`, "text/html");
doc = Zotero.HTTP.wrapDocument(doc, uri);

let translate = (this._translate = new Zotero.Translate.Web());
translate.setDocument(doc);
cookieSandbox && translate.setCookieSandbox(cookieSandbox);

translators = await translate.getTranslators();
translate.setTranslator(translators[0].translatorID);

let items = await translate.translate({
libraryID,
collections: ['"$COLLECTION_ID"'],
});
})();'
	else
		notify-send "Couldn't import to zotero: $SOURCE"
		exit 1
	fi

	nc 127.0.0.1 8080 < <(echo "$import_script")
}

eval_script_return_value() {
	TMP_FILE2="/tmp/zotero_return_value"
	readonly TMP_FILE2

	trap 'rm $TMP_FILE2' RETURN
	local -r SCRIPT='
  '"$1"'
  await Zotero.File.putContentsAsync("'"$TMP_FILE2"'", result);
})();
'

	nc 127.0.0.1 8080 < <(echo "$SCRIPT")
	until [[ -f "$TMP_FILE2" ]]; do
		sleep 0.1
	done
	cat "$TMP_FILE2"
}

main() {
	pgrep zotero >/dev/null || { notify-send "Zotero instance doesn't exist" && exit 1; }
	(($# == 0)) && {
		echo "Need a source"
		exit 1
	}

	declare -r FRE_NAME="zotero_collection"
	declare -r SOURCE="$1"

	if [[ "$2" ]]; then
		declare -r COLLECTION_ID="$(get_collection_id_from_name "$2")"
	else
		declare -r COLLECTION_ID="$(pick_collection_id)"
	fi
	[[ -z "$COLLECTION_ID" ]] && exit 0
	import_source
}

main "$@"
