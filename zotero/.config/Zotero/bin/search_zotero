#!/usr/bin/env bash
# Search Zotero items, focus them in Zotero, and open their documents & links
#
# Dependencies: zotero netcat fzf

search_entries() {
	script='
  (async function () {

  let libraries = await Zotero.Libraries.getAll()

  let collections_str = ""
  let items_str = ""
  let storage_path = Zotero.getStorageDirectory().path

  function get_collections(collections, name) {

  for (let collection of collections) {
    if (collection.hasChildCollections()) {
      collections_str += collection.key + "\t" + name + " > " + collection.name
      get_collections(collection.getChildCollections(), name + " > " + collection.name)
    } else {
    collections_str += collection.key + "\t" + name + " > " + collection.name
  }

  if (collection.hasChildItems()) {

    collection_path = name + " > " + collection.name
    collection.getChildItems().forEach(function (item) {
    let item_json = item.toJSON();
    let file_path = "null"
    let url = "null"
    let date = ""
    let creators = ""
    //file_path = Zotero.Attachments.getStorageDirectory(item).path
    if (item._bestAttachmentState != null) {
      if (item._bestAttachmentState.exists && item._bestAttachmentState.type === "pdf") {
        file_path = storage_path + "/" + item._bestAttachmentState.key
      }
    } else if (item._attachments !=null) {
    if (item._attachments.rows.length > 0) {
    for (let row of item._attachments.rows) {
      file_path = Zotero.Attachments.getStorageDirectoryByID(row.itemID).path
    }
  }
}
    if ("url" in item_json) {
      url = item_json.url
    }

    if ("date" in item_json) {
      date = item_json.date
    }

    if (item_json.creators.length > 0) {
      item_json.creators.forEach(function(creator) {
      creators += creator.firstName + " " + creator.lastName + ", ";
      } );
      creators = creators.substring(0, creators.length -2);
    }

    items_str += item._id + "\t" + item_json.key + "\t" + url + "\t" + file_path + "\t" + collection_path + "\t" + item_json.itemType + "\t" + date + "\t" + creators + "\n" + item_json.title + "\n"
  });
}
}
return items_str
}

let collections = await Zotero.Collections.getLoaded()

for (let library of libraries) {
  let collections = await Zotero.Collections.getByLibrary(library.id)
  collections_str += get_collections(collections, library.name)
}

let result = collections_str
'

	result="$(eval_script_return_value "$script")"
	FRE_NAME="zotero_items"

	frecency_result="$(fre --store_name "zotero_items" --sorted)"

	result="$(awk -F$'\t' '
NR==FNR { order[NR] = $1; next }
{
    key = $1;
    val = $1 "\t" $2 "\t" $3 "\t" $4 "\t\033[36m" $5 "\033[0m\t\033[1;38m" $6 "\033[0m\t\033[37m" $7 "\t" $8 "\033[0m" ;
    getline;
    val = val ORS "\033[1;32m" $0 "\033[0m";
    data[key] = val;
    keys[++count] = key;
}
END {
    # Print keys that exist in `a` first, in order

    for (k in order) {
        i=order[k];
        if (i in data) print data[i];
    }
    # Print remaining keys in their original order
    not_found = 1
    for (i = 1; i <= count; i++) {
        not_found = 1
        for (k in order) {
            if (order[k] == keys[i]) {
                not_found = 0
                break;
            }
        }
        if (not_found) {
            print data[keys[i]]
        }
    }
  }' <(echo "$frecency_result") <(echo "$result"))"

	awk 'NR==1 {print; next} NR%2==0 {printf "%s\0", $0; next} {print}' < <(echo "$result") >|/tmp/result_null

	# Focus collection and item in Zotero JS
	focus_zotero_item='(async function() {
    function getZoteroPane() {
		  let windows = Zotero.getMainWindows();
		  for (let win of windows) {
			  if (win.ZoteroPane) return win.ZoteroPane
		  }
	  }
    async function focus_zotero_item(id) {
      let item = Zotero.Items.get(id)
      let zotero_pane = getZoteroPane();
      // Focus collection
      await zotero_pane.collectionsView.selectCollection(item._collections[0])
      // Focus item
      zotero_pane.selectItem(item._id)
    }

  focus_zotero_item('

	TMP_FILE="$(mktemp -t "tmp_XXX")"
	readonly TMP_FILE

	trap 'rm $TMP_FILE' EXIT

	IFS='' read -r -d '' cmd <<EOF
  cat "/tmp/result_null" |  fzf --read0 --ansi --with-nth {5..} \
  --preview='$XDG_CONFIG_HOME/fzf/fzf_preview_media "\$(find {4}  -type f -name "*" ! -name ".*" 2>/dev/null)"'\
  --bind 'alt-u:execute-silent(xdg-open {3})' \
  --bind 'alt-q:execute-silent(dunstify {1})' \
  --bind 'alt-z:execute-silent(i3-msg '\''[class="Zotero"] focus'\'' && /bin/nc 127.0.0.1 8080 < <(echo "${focus_zotero_item}{1})})();"))' \
  --header 'Enter open document, A-u open link, A-z focus in zotero' \
  >| '${TMP_FILE}'
EOF

	eval_interactive_cmd --floating "$cmd"

	[[ -s "$TMP_FILE" ]] || exit 1

	FILE_PATH="$(<"$TMP_FILE" cut -d $'\t' -f 4 | head -n 1)"

	# Open document if directory exists; otherwise, open link
	if [[ -d "$FILE_PATH" ]]; then
		xdg-open "$(find "$FILE_PATH" -type f -name "*" ! -name ".*")" &
		disown
		i3-msg "workspace 8" &
	else
		xdg-open "$(<"$TMP_FILE" cut -d $'\t' -f 3 | head -n 1)"
	fi
	fre --store_name "$FRE_NAME" --add "$(<"$TMP_FILE" cut -d $'\t' -f -1 | head -n 1)"
}

eval_script_return_value() {
	tmp="/tmp/search_zotero_${RANDOM}"

	SCRIPT='
  '"$1"'
  await Zotero.File.putContentsAsync("'"$tmp"'", result);
})();
'

	nc 127.0.0.1 8080 < <(echo "$SCRIPT")
	until [[ -f "$tmp" ]]; do
		sleep 0.1
	done
	cat "$tmp"
	rm "$tmp"
}

search_entries
