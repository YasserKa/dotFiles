[Commands]
1\Command="copyq:\nvar selectedItem1 = selectedItemData(0)[mimeText]\nvar selectedItem2 = selectedItemData(1)[mimeText]\n\nvar item1 = null\nvar item2 = null\n\nif (selectedItem2 == undefined) {\n    // the selected item either doesn't contain text\n    // or the command is run as global shortcut.\n    // select the last two clipboard in this case.\n    item1 = read(1)\n    item2 = read(0)\n} else {\n    item1 = selectedItem1\n    item2 = selectedItem2\n}\n\nfunction tempFile(content) {\n    var file = new TemporaryFile()\n    file.openWriteOnly()\n    file.write(content)\n    file.close()\n    return file\n}\n\nvar f1 = tempFile(item1)\nvar f2 = tempFile(item2)\nvar name1 = f1.fileName()\nvar name2 = f2.fileName()\n\n// Choose your favorite diff tool (leave just one execute(...) uncommented):\n\n// === Beyond Compare ===\n// reference: https://www.scootersoftware.com/v4help/command_line_reference.html\n// If it doesn't work, try using the full path, eg:\n// execute('/usr/local/bin/compare', name1, name2)\nexecute('bcompare', name1, name2)\n\n// === WinMerge ===\n// reference: https://manual.winmerge.org/en/Command_line.html\n// execute('winmergeu', '/e', '/x', '/u', '/fl', '/dl', 'item1', '/dr', 'item2', name1, name2)\n\n// Wait few seconds before exiting script and deleting temporary files,\n// because the command may be executed in background.\nsleep(5000)"
1\GlobalShortcut=meta+ctrl+alt+shift+d
1\Icon=\xf0db
1\InMenu=true
1\IsGlobalShortcut=true
1\Name=Diff Latest Items
1\Shortcut=ctrl+d
10\Command=copyq: plugins.itemtags.untag()
10\Icon=\xf02b
10\InMenu=true
10\Input=application/x-copyq-tags
10\InternalId=copyq_tags_untag
10\Name=Remove a Tag
11\Command=copyq: plugins.itemtags.clearTags()
11\Icon=\xf02b
11\InMenu=true
11\Input=application/x-copyq-tags
11\InternalId=copyq_tags_clear
11\Name=Clear all tags
2\Automatic=true
2\Command="copyq:\nconst notificationTimeout = config('item_popup_interval') * 1000;\nconst passwordLengthRange = [16, 128];\nconst passwordMustNotContainSpaces = true;\nconst passwordMustContainNumber = true;\nconst passwordMustContainLowercaseLetter = true;\nconst passwordMustContainUppercaseLetter = true;\nconst allowList = [/^https?:\\/\\//]\n\n// Assume that HTML text does not contain secrets\nif (data(mimeHtml).length !== 0) abort();\n\nconst textData = data(mimeText);\nif (textData.length < passwordLengthRange[0]) abort();\nif (textData.length > passwordLengthRange[1]) abort();\n\nconst text = str(textData);\nif (passwordMustNotContainSpaces && /\\s/.test(text)) abort();\n\nif (passwordMustContainNumber && !/\\d/.test(text)) abort();\nif (passwordMustContainLowercaseLetter && !/[a-z]/.test(text)) abort();\nif (passwordMustContainUppercaseLetter && !/[A-Z]/.test(text)) abort();\n\nfor (const re of allowList) {\n    if (re.test(text)) abort();\n}\n\nignore();"
2\Icon=\xf084
2\Name=Ignore Passwords/Tokens
3\Automatic=true
3\Command="copyq:\nvar f = new TemporaryFile()\nf.open()\nf.setAutoRemove(false)\nif (!f.openWriteOnly() || f.write(read('image/png')) == -1)\n  throw 'Failed to save the file: ' + f.errorString()\nsetData('text/plain', f.fileName())\n"
3\Icon=\xf085
3\Input=image/png
3\Name=Save images to temporary files
4\Automatic=true
4\Command="copyq:\nvar time = dateString('MM-dd hh:mm:ss')\nsetData('application/x-copyq-user-copy-time', time)\n\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + time\nsetData(tagsMime, tags)\n"
4\Icon=\xf017
4\Name=Store Copy Time
5\Command=copyq: plugins.itempinned.pin()
5\Icon=\xf08d
5\InMenu=true
5\Input=!OUTPUT
5\InternalId=copyq_pinned_pin
5\Name=Pin
5\Output=application/x-copyq-item-pinned
6\Command=copyq: plugins.itempinned.unpin()
6\Icon=\xf08d
6\InMenu=true
6\Input=application/x-copyq-item-pinned
6\InternalId=copyq_pinned_unpin
6\Name=Unpin
7\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('Important')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('Important'))
7\Icon=\xf02b
7\InMenu=true
7\InternalId=copyq_tags_tag:Important
7\Name=Toggle Tag \x201cImportant\x201d
8\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
8\Icon=\xf02b
8\InMenu=true
8\InternalId=copyq_tags_untag:Important
8\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
8\Name=Remove tag \x201cImportant\x201d
9\Command=copyq: plugins.itemtags.tag()
9\Icon=\xf02b
9\InMenu=true
9\InternalId=copyq_tags_tag
9\Name=Add a Tag
size=11
