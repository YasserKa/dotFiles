#!/usr/bin/env python
#
# Archive a web page to web.archive.org, archive.ph, and ghostarchive.org

import os
import sys
import threading

from requests import get
from requests.exceptions import HTTPError, RequestException
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager

executable_path = f"{os.environ['XDG_CONFIG_HOME']}/google-chrome/chromedriver"


def archive_to_waybackmachine(url, tries=0):
    TIMEOUT = 30
    MAX_TRIES = 3
    api_url = f"http://web.archive.org/save/{url}"
    available_api_url = f"http://archive.org/wayback/available?url={url}"

    try:
        # Attempt to archive the page
        response = get(api_url, timeout=TIMEOUT)
        response.raise_for_status()

        # Check if the page was archived
        response = get(available_api_url, timeout=TIMEOUT)
        response.raise_for_status()

        if response.status_code == 200:
            snapshots = response.json().get("archived_snapshots", {})
            if not snapshots:
                show_message("Page not archived, trying again")
                if tries < MAX_TRIES:
                    return archive_to_waybackmachine(url, tries + 1)
                else:
                    show_message(
                        f"Max retries reached. Couldn't archive {url} to waybackmachine"
                    )

        show_message("Archived to waybackmachine")

    except (RequestException, HTTPError) as e:
        if tries < MAX_TRIES:
            show_message(f"Error: {e}. Retrying {tries + 1}/{MAX_TRIES}")
            return archive_to_waybackmachine(url, tries + 1)
        show_message(
            f"Failed to archive {url} to waybackmachine after {MAX_TRIES} attempts."
        )


def archive_to_archivebox(url, tries=0):
    TIMEOUT = 30
    MAX_TRIES = 3
    api_url = f"http://archive.lenovo-y700/api/add?url={url}"

    try:
        # Attempt to archive the page
        response = get(api_url, timeout=TIMEOUT)
        response.raise_for_status()

        if response.status_code == 200:
            show_message("Archived to archivebox")

    except (RequestException, HTTPError) as e:
        if tries < MAX_TRIES:
            show_message(f"Error: {e}. Retrying {tries + 1}/{MAX_TRIES}")
            return archive_to_waybackmachine(url, tries + 1)
        show_message(
            f"Failed to archive {url} to archive_to_waybackmachine after {MAX_TRIES} attempts."
        )


def show_message(message):
    # Show message in Qutebrowser
    if "QUTE_FIFO" in os.environ:
        with open(os.environ["QUTE_FIFO"], "w") as fifo:
            fifo.write(f"message-info '{message}'" + "\n")
            fifo.flush()
    else:
        print(message)


def archive_to_today(driver, link):
    driver.get("https://archive.ph/")
    WebDriverWait(driver, 10).until(
        lambda x: len(x.find_elements(By.CSS_SELECTOR, "#submiturl")) > 0
    )

    driver.find_element(By.CSS_SELECTOR, "#submiturl  input[id=url]").send_keys(link)
    driver.find_element(By.CSS_SELECTOR, "#submiturl  input[type=submit]").click()

    WebDriverWait(driver, 5 * 60).until(
        lambda x: len(x.find_elements(By.ID, "HEADER")) > 0
    )

    # If it's archived, archive it again
    if len(driver.find_elements(By.ID, "DIVALREADY2")) >= 1:
        driver.find_element(By.CSS_SELECTOR, "#DIVALREADY2 input[type=submit]").click()
        WebDriverWait(driver, 5 * 60).until(
            lambda x: len(x.find_elements(By.ID, "HEADER")) > 0
        )

    if len(driver.find_elements(By.ID, "HEADER")) == 0:
        show_message("Page not archived to archive.ph")

    show_message("archived to archive today")


def archive_to_ghost(driver, link):
    driver.get("https://ghostarchive.org/")
    WebDriverWait(driver, 10).until(
        lambda x: len(x.find_elements(By.ID, "archive")) > 0
    )

    driver.find_element(By.ID, "archive").send_keys(link)
    driver.find_element(By.CSS_SELECTOR, "#archive ~ input[type=submit]").click()

    WebDriverWait(driver, 5 * 60).until(
        lambda x: len(x.find_elements(By.XPATH, ".//noscript")) > 0
    )
    show_message("Archived to ghostarchive")
    driver.close()


def main(link):
    # Remove anchors
    link = link.split("#")[0]
    options1 = webdriver.ChromeOptions()
    options1.add_argument("user-data-dir=/tmp/selenium_chrome_profile1")
    options1.add_argument("binary_location=/bin/google-chrome-stable")

    service = Service(ChromeDriverManager().install())
    driver1 = webdriver.Chrome(service=service, options=options1)

    options2 = webdriver.ChromeOptions()
    options2.add_argument("user-data-dir=/tmp/selenium_chrome_profile2")
    options2.add_argument("binary_location=/bin/google-chrome-stable2")
    driver2 = webdriver.Chrome(service=service, options=options2)
    threads_args = [
        [archive_to_today, [driver1, link]],
        [archive_to_ghost, [driver2, link]],
        [archive_to_waybackmachine, [link]],
        [archive_to_archivebox, [link]],
    ]

    for args in threads_args:
        threading.Thread(target=args[0], args=(args[1])).start()


if len(sys.argv) < 2:
    print("Usage: python archive.py <url>")
    sys.exit(1)

main(sys.argv[1])
