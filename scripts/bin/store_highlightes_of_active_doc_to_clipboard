#!/usr/bin/env bash

# Dependencies: xdotool, xclip, get_annotations_from_document
# Store in clipboard the highlighted text of focused document
# It runs two times
# The first time it saves the document by pressing ctrl+d
# The second time stores the annotations to the clipboard

# Saving the file and storing annotations at the same exectuion doesn't work

# First execution: 
# If it's executed without and argument, then save the file and pass the path to
# the second execution
if [[ ! "$1" ]]; then
    # xdotool key --clearmodifiers ctrl+s needs to be called 2 times to save the
    # document
    # Second execution:
    # Store annotation to clipboard
    window_name="$(xdotool getwindowname "$(xdotool getactivewindow)")"

    # Remove r - Okular" from the string
    # Using deep learning and social network analysis to understand and manage extreme flooding  â€” Okular
    document_name_needed="${window_name:0:-9}"
    [[ "${document_name_needed: -1}" == '*' ]] && document_name_needed="${document_name_needed:0:-1}"
    document_name_needed="${document_name_needed:0:-1}"

    # Get open documents
    open_documents_paths="$(lsof -c okular | grep -E "(mobi|epub|pdf)$" | tr -s ' ' | cut -d ' ' -f 9-)"

    # Get the path for the open document focused
    while IFS= read -r open_document_path; do
        open_document_name="$(pdfinfo "$open_document_path" | grep -oP "Title:\s*\K(.*)")"
        [[ "$document_name_needed" == "$open_document_name" ]] && document_path_needed="$open_document_path" && break
    done <<< "$open_documents_paths"
    # Save document
    xdotool key --clearmodifiers ctrl+s && "$0" "$document_path_needed"
else  
    get_annotations_from_document "$1" | xclip -selection clipboard
fi
