#!/usr/bin/env python

import os
import re
import subprocess
from datetime import datetime
from time import sleep

from dateutil.parser import parse
from selenium import webdriver
from selenium.common.exceptions import SessionNotCreatedException, TimeoutException
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait

# Used by dunstify/dunst
APP_NAME = "notify-me"


def check_discord(driver):
    URL_DISCORD = "https://discordapp.com/channels/@me"

    driver.get(URL_DISCORD)
    WebDriverWait(driver, 10).until(
        lambda x: len(x.find_elements(By.XPATH, './/*[contains(text(), "Friends")]'))
        > 0
    )
    sleep(1)

    # There are two pills, the one that shows unread messages (height 8px), the
    # one that shows the focused server (height 40px)
    notificaitons_el = driver.find_elements(By.CSS_SELECTOR, "div[class*=lowerBadge]")

    discord_servers = driver.find_elements(
        By.XPATH,
        './/div[contains(@aria-label, "Servers")]/*/div/span[contains(@class, "item")]',
    )

    notificaiton_exists = len(notificaitons_el) > 0 or len(discord_servers) > 0

    if notificaiton_exists:
        send_notification("  Discord", URL_DISCORD)


def send_notification(notification_text, url):
    subprocess.Popen(
        (
            f"[[ $(dunstify '{notification_text}' --appname={APP_NAME}"
            f" --action='action,label') == 'action' ]] && qutebrowser {url} || exit 1"
        ),
        shell=True,
        text=True,
    )


def check_facebook(driver):
    URL_FACEBOOK = "https://www.facebook.com/"

    driver.get(URL_FACEBOOK)
    WebDriverWait(driver, 5).until(
        lambda x: len(
            x.find_elements(By.XPATH, './/div[contains(@aria-label, "Messenger")]')
        )
        > 0
    )

    notificaitons_el = driver.find_elements(
        By.XPATH,
        './/div[contains(@aria-label, "Messenger")]//child::span[1][(text()=number())]',
    )

    notificaiton_exists = len(notificaitons_el) > 0

    if notificaiton_exists:
        send_notification("  Facebook", URL_FACEBOOK)


def check_whatsapp(driver):
    URL_WHATS_APP = "https://web.whatsapp.com/"

    driver.get(URL_WHATS_APP)
    WebDriverWait(driver, 60).until(
        lambda x: len(
            x.find_elements(By.XPATH, './/*[contains(text(),"WhatsApp Web")]')
        )
        > 0
    )
    # Needed to extract unread_messages correctly
    sleep(5)

    # Check if the web app is logged in
    whatsapp_not_logged_in = (
        len(
            driver.find_elements(
                By.XPATH,
                './/*[contains(text(), "Use WhatsApp on your computer")]',
            )
        )
        > 0
    )

    if whatsapp_not_logged_in:
        send_notification("Whatsapp not logged in", URL_WHATS_APP)
        return

    unread_messages = driver.find_elements(
        By.CSS_SELECTOR, "div > *[role=gridcell] > span > div"
    )

    missed_calls = driver.find_elements(
        By.XPATH,
        (
            './/*[contains(text(),"Missed voice call")]/parent::node()/'
            "parent::node()/parent::node()/parent::node()"
            '//*[contains(text(),":")]'
        ),
    )

    has_recent_missed_call = False

    if len(missed_calls) > 0:
        time_text = missed_calls[0].text

        if re.search("[0-9]{1,2}:[0-9]{2}[  ](am|pm|Pm|Am)", time_text) is not None:
            minutes_since = (datetime.now() - parse(time_text)).total_seconds() // 60
            # Check if last missed call is before 32 minutes from current time
            has_recent_missed_call = minutes_since < 32

    unread_messages_missed_callexist = (
        len(unread_messages) > 0 or has_recent_missed_call
    )

    if unread_messages_missed_callexist:
        send_notification("  Whatsapp", URL_WHATS_APP)


def main():
    XDG_CONFIG_HOME = os.environ["XDG_CONFIG_HOME"]
    executable_path = f"{XDG_CONFIG_HOME}/google-chrome/chromedriver"
    profile_path = f"{XDG_CONFIG_HOME}/google-chrome/notify_me_profile"
    # Used for another whatsapp account
    profile_path_1 = f"{XDG_CONFIG_HOME}/google-chrome/notify_me_profile_l"

    options = webdriver.ChromeOptions()
    options.add_argument("user-data-dir=" + profile_path)
    # options.add_argument("--headless=new")
    options.add_argument("binary_location=/bin/google-chrome-stable")

    driver = webdriver.Chrome(
        service=Service(executable_path=executable_path), options=options
    )
    try:
        check_whatsapp(driver)

        options.add_argument("user-data-dir=" + profile_path_1)
        driver = webdriver.Chrome(
            service=Service(executable_path=executable_path), options=options
        )
        check_whatsapp(driver)
    except TimeoutException:
        pass

    driver.close()


if __name__ == "__main__":
    # The script sometimes fails. If it fails two times, send me notification.
    # The state of failure is tracked by a temporary file
    TEMPORARY_FILE_PATH = "/tmp/notify_me_exception"
    try:
        main()
    except SessionNotCreatedException as e:
        if os.path.exists(TEMPORARY_FILE_PATH):
            subprocess.run("dunstify 'Maybe need a new chromium version'", shell=True)
        with open(TEMPORARY_FILE_PATH, "w") as fp:
            fp.write(str(e))
            pass
    except Exception as e:
        if os.path.exists(TEMPORARY_FILE_PATH):
            subprocess.run("dunstify 'notify_me didnt work'", shell=True)
        with open(TEMPORARY_FILE_PATH, "w") as fp:
            fp.write(str(e))
            pass
    else:
        if os.path.exists(TEMPORARY_FILE_PATH):
            os.remove(TEMPORARY_FILE_PATH)
