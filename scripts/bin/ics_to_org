#!/usr/bin/env python
# Update Swedish holidays in org mode
# Dependencies: icsorg

import argparse
import subprocess
import sys
import tempfile
from pathlib import Path


def run_icsorg(tmp_path, ics_url):
    print("Fetching and converting ICS data...")
    try:
        subprocess.run(
            [
                "icsorg",
                "-i",
                ics_url,
                "-o",
                str(tmp_path),
            ],
            check=True,
        )
    except subprocess.CalledProcessError:
        print("Error: Failed to run icsorg.")
        sys.exit(1)


def read_lines(path):
    return path.read_text(encoding="utf-8").splitlines()


def write_lines(path, lines):
    path.write_text("\n".join(lines) + "\n", encoding="utf-8")


def clean_icsorg_lines(lines):
    cleaned = []
    header_skipped = False
    for line in lines:
        if not header_skipped:
            if line.strip().startswith("#+"):
                continue
            elif line.strip() == "":
                continue  # skip empty line after metadata
            header_skipped = True

        if line.strip().startswith("*"):
            stars, rest = line.split(" ", 1)
            line = stars + " " + rest  # promote heading level
        cleaned.append(line)
    return cleaned


def replace_section(insert_lines, heading, file_path):
    main_lines = read_lines(file_path)
    start = next(
        (i for i, line in enumerate(main_lines) if line.strip() == heading), None
    )
    # Add the heading if it doesn't exist
    if start is None:
        main_lines.append(f"{heading}")
        start = len(main_lines)

    end = start + 1
    while end < len(main_lines) and not main_lines[end].startswith("* "):
        end += 1

    return main_lines[: start + 1] + insert_lines + main_lines[end:]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--ics_url")
    parser.add_argument("--file_path")
    parser.add_argument("--heading")

    args = parser.parse_args()

    ICS_URL = args.ics_url
    FILE_PATH = Path(args.file_path)
    HEADING = args.heading

    with tempfile.NamedTemporaryFile(delete=False, suffix=".org") as tmp:
        tmp_path = Path(tmp.name)

    run_icsorg(tmp_path, ICS_URL)
    ics_lines = read_lines(tmp_path)
    cleaned_lines = clean_icsorg_lines(ics_lines)
    updated_lines = replace_section(cleaned_lines, HEADING, FILE_PATH)
    write_lines(FILE_PATH, updated_lines)

    tmp_path.unlink(missing_ok=True)
    print(f'âœ… Updated "{HEADING}" in {FILE_PATH}.')


if __name__ == "__main__":
    main()
