#!/usr/bin/env bash
#
# Open documents or delete them using <C-d> using rofi
# Dependencies: fasd (for frecency), fd (searching files), rofi (interface)

declare ROFI_OPTIONS
ROFI_OPTIONS=(
	-p "Document" # Prompt
	-i            # Search case sensitive
	-dmenu
	-mesg "<b>C-M-d</b>: Delete document" # Message below filter entry box
	-no-custom                            # Can't choose entry that's not available
	-kb-delete-entry ""                   # Override <C-d> entry to delete documents
	-kb-custom-1 Control+Alt+d            # exit status 10
	-format "i f"                         # option index, user's input
	-only-custom                          # Don't allow custom values
)
readonly ROFI_OPTIONS

# Paths to search for documents
# REASON: It's slow to search all directories (including hidden)
declare -a PATHS_TO_SEARCH
# TODO: if this changes, zotero's link handler should be changed as well. Try to
# resolve this duplication
PATHS_TO_SEARCH=("${HOME}" "${XDG_DATA_HOME}/Zotero")
readonly PATHS_TO_SEARCH

################################################################################
# Get basename for documents in PATHS_TO_SEARCH by using a regex on their
# extensions. Place priority on documents using fasd (frecency) (i.e. frequency
# and recently opened)
# Globals:
#     PATHS_TO_SEARCH
# Arguments:
#     None
# Outputs:
#     file names for documents seperated by new line
################################################################################
get_documents() {
	local DOCS_PATH
	DOCS_PATH="$(fd --regex '.*.(pdf|djvu|epub)$' "${PATHS_TO_SEARCH[@]}")"
	readonly DOCS_PATH
	local DOCS_BASENAME
	DOCS_BASENAME=$(echo "${DOCS_PATH}" | sed -e 's/\(.*\)/"\1"/' | xargs basename --multiple)
	readonly "${DOCS_BASENAME}"
	# For frecency (tracks only the visited files)
	local FASD_DOCS
	FASD_DOCS="$(fasd -lR "${DOCS_BASENAME}" | sed -e 's/\(.*\)/"\1"/' | xargs basename --multiple)"
	readonly FASD_DOCS
	# Get all files
	local ALL_DOCS
	ALL_DOCS="$(echo -e "$FASD_DOCS\n$DOCS_BASENAME")"
	readonly ALL_DOCS
	local NO_DUPLICATES
	NO_DUPLICATES=$(echo "$ALL_DOCS" | awk '!a[$0]++' | tail -n +2)
	readonly NO_DUPLICATES
	echo "$NO_DUPLICATES"
}

main() {
	local -r FILTERED_BY=${1:-""}

	local -a DOCUMENTS
	mapfile -t DOCUMENTS < <(get_documents)
	readonly DOCUMENTS

	local SELECTED_OPTION
	SELECTED_OPTION="$(printf "%s\n" "${DOCUMENTS[@]}" |
		rofi "${ROFI_OPTIONS[@]}" -filter "$FILTERED_BY")"

	local -r ROFI_EXIT_STATUS="$?"
	# Need to be done afterwards, otherwise the exit status gets overriden
	readonly SELECTED_OPTION

	# No option has been selected
	((ROFI_EXIT_STATUS == 1)) && exit 0

	local SELECTED_INDEX
	SELECTED_INDEX="$(echo "$SELECTED_OPTION" | cut -d ' ' -f -1)"
	readonly SELECTED_INDEX
	USER_INPUT="$(echo "$SELECTED_OPTION" | cut -d ' ' -f 2-)"
	readonly USER_INPUT

	local SELECTED_DOCUMENT
	SELECTED_DOCUMENT="${DOCUMENTS[${SELECTED_INDEX}]}"
	readonly SELECTED_DOCUMENT
	local DOCUMENT_PATH
	DOCUMENT_PATH="$(fd -g "${SELECTED_DOCUMENT}" "${PATHS_TO_SEARCH[@]}" | head -n 1)"
	readonly DOCUMENT_PATH

	if ((ROFI_EXIT_STATUS == 10)); then
		# Remove document and re-open menu again
		rm "${DOCUMENT_PATH}"
		main "${USER_INPUT}"
	else
		# Append path to fasd for frecency (frequency and recency)
		fasd -a "${DOCUMENT_PATH}"
		xdg-open "${DOCUMENT_PATH}" >/dev/null &
		disown
		i3-msg 'workspace --no-auto-back-and-forth 8'
	fi
}

main
